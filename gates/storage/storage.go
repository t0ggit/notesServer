package storage

import "errors"

// Storage - интерфейс, представляющий обобщенное хранилище данных.
// Тип данных хранящихся элементов фиксируется при добавлении первого элемента и сбрасывается при удалении последнего.
// Хранилище само присваивает идентификаторы элементам.
type Storage interface {
	// Len возвращает количество элементов в хранилище.
	Len() int64

	// Add добавляет элемент в хранилище и возвращает его ID и возможную ошибку.
	// value может быть любого типа.
	// Если тип value отличается от типов уже присутствующих в хранилище элементов,
	// возвращается -1 и ошибка ErrMismatchType. Если хранилище пусто, тип данных value становится допустимым типом для хранилища,
	// и ошибка не возвращается.
	Add(value interface{}) (int64, error)

	// RemoveByID удаляет элемент с указанным ID из хранилища.
	// Если элемента с таким ID нет, функция не делает ничего.
	RemoveByID(id int64)

	// RemoveByValue удаляет первый найденный элемент с указанным значением из хранилища.
	// Если элемента с таким значением нет, функция не делает ничего.
	RemoveByValue(value interface{})

	// RemoveAllByValue удаляет все элементы с указанным значением из хранилища.
	// Если элементов с таким значением нет, функция не делает ничего.
	RemoveAllByValue(value interface{})

	// GetByID возвращает значение элемента с указанным ID.
	// Если элемента с таким ID нет, возвращается nil и false.
	GetByID(id int64) (interface{}, bool)

	// GetByValue возвращает ID первого найденного элемента с указанным значением.
	// Если элемента с таким значением нет, возвращается 0 и false.
	GetByValue(value interface{}) (int64, bool)

	// GetAllByValue возвращает идентификаторы всех найденных элементов с указанным значением.
	// Если элементов с таким значением нет, возвращается nil и false.
	GetAllByValue(value interface{}) ([]int64, bool)

	// UpdateByID обновляет значение элемента с указанным ID.
	// Если элемента с таким ID нет, функция возвращает false и nil.
	// Если тип value отличается от типов уже присутствующих в хранилище элементов, возвращается ошибка ErrMismatchType.
	UpdateByID(id int64, value interface{}) (bool, error)

	// GetAll возвращает все элементы хранилища в виде map[int64]any.
	// Ключи map соответствуют идентификаторам элементов. Значения map соответствуют значению элементов.
	// Если хранилище пусто, возвращается nil и false.
	GetAll() (map[int64]any, bool)

	// Clear удаляет все элементы из хранилища.
	Clear()

	// Print выводит содержимое хранилища в консоль.
	Print()

	//// todo | ну вроде как все сделано, из идей еще только GracefulShutdown,
	//// todo | а значит нужно добавить к этому интерфейсу Dump() и Load(),
	//// todo | чтобы маршалить мапное представление хранилища и уметь из этой мапы воссоздать его
	//// todo | НО! надо же как-то дампнуть и метаданные (например, initialID), но оно не в интерфейсе

	//// todo | (мб поискать способы сериализации без json, как pickle в питоне?)
}

// ErrMismatchType ошибка, возвращаемая методами Add и Update,
// если тип нового элемента не соответствует типу уже присутствующих в хранилище элементов.
var ErrMismatchType = errors.New("mismatched type: the type of the provided value does not match the type of items already in the storage")
